import {
  ElementMixin
} from "./chunk-6TGXYB6C.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-LYMUE5P7.js";
import {
  css
} from "./chunk-AILCGYJH.js";
import {
  PolymerElement
} from "./chunk-YGHRZLAU.js";
import {
  html
} from "./chunk-5VJMXRGB.js";

// node_modules/.pnpm/@vaadin/confirm-dialog@22.0.0-beta2/node_modules/@vaadin/confirm-dialog/theme/lumo/vaadin-confirm-dialog-styles.js
registerStyles("vaadin-dialog-overlay", css`
    :host([theme~='_vaadin-confirm-dialog-dialog-overlay-theme']) [part='content'] {
      height: auto;
      box-sizing: content-box;
    }
  `, { moduleId: "lumo-confirm-dialog-overlay" });
registerStyles("vaadin-confirm-dialog", css`
    #content {
      height: calc(
        var(--_vaadin-confirm-dialog-content-height) - var(--_vaadin-confirm-dialog-footer-height) - var(--lumo-space-s)
      );
      width: var(--_vaadin-confirm-dialog-content-width);
    }

    [part='header'],
    .header {
      margin-top: var(--lumo-space-s);
      margin-bottom: var(--lumo-space-m);
    }

    [part='message'] {
      width: 25em;
      min-width: 100%;
      max-width: 100%;
    }

    [part='footer'] {
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-end;
      margin: calc(var(--lumo-space-l) * -1);
      margin-top: var(--lumo-space-l);
      padding: 0 var(--lumo-space-l);
      background-color: var(--lumo-contrast-5pct);
    }

    [part='footer'] div {
      margin-top: var(--lumo-space-s);
      margin-bottom: var(--lumo-space-s);
    }

    vaadin-button[theme~='tertiary'] {
      padding-left: var(--lumo-space-s);
      padding-right: var(--lumo-space-s);
    }

    .cancel-button {
      flex-grow: 1;
    }

    :not([dir='rtl']) > .cancel-button {
      margin-left: calc(var(--lumo-space-s) * -1);
    }

    :not([dir='rtl']) > .confirm-button {
      margin-right: calc(var(--lumo-space-s) * -1);
    }

    :not([dir='rtl']) > .reject-button,
    :not([dir='rtl']) > .confirm-button {
      margin-left: var(--lumo-space-s);
    }

    @media (max-width: 360px) {
      [part='footer'] {
        flex-direction: column-reverse;
      }

      [part='footer'] div {
        margin: var(--lumo-space-xs) calc(var(--lumo-space-l) / -2) calc(var(--lumo-space-xs) * -1);
      }

      [part='footer'] vaadin-button,
      [part='footer'] ::slotted(*) {
        width: 100%;
        margin-top: var(--lumo-space-xs);
        margin-bottom: var(--lumo-space-xs);
      }

      [part='footer'] .confirm-button {
        margin-top: var(--lumo-space-s);
      }

      [part='footer'] .cancel-button {
        margin-bottom: var(--lumo-space-s);
      }
    }

    /* RTL specific styles */
    [dir='rtl'] > .cancel-button {
      margin-right: calc(var(--lumo-space-s) * -1);
    }

    [dir='rtl'] > .confirm-button {
      margin-left: calc(var(--lumo-space-s) * -1);
    }

    [dir='rtl'] > .reject-button,
    [dir='rtl'] > .confirm-button {
      margin-right: var(--lumo-space-s);
    }
  `, { moduleId: "lumo-confirm-dialog" });

// node_modules/.pnpm/@vaadin/confirm-dialog@22.0.0-beta2/node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js
var ConfirmDialog = class extends ElementMixin(ThemableMixin(PolymerElement)) {
  static get template() {
    return html`
      <style>
        :host {
          display: none;
          --_vaadin-confirm-dialog-content-width: auto;
          --_vaadin-confirm-dialog-content-height: auto;
          --_vaadin-confirm-dialog-footer-height: auto;
        }
      </style>

      <vaadin-dialog
        id="dialog"
        opened="{{opened}}"
        aria-label="[[_getAriaLabel(header)]]"
        theme$="_vaadin-confirm-dialog-dialog-overlay-theme [[theme]]"
        no-close-on-outside-click
        no-close-on-esc="[[noCloseOnEsc]]"
      ></vaadin-dialog>

      <template id="dialogTemplate">
        <div id="content">
          <div part="header">
            <slot name="header">
              <h3 class="header">[[header]]</h3>
            </slot>
          </div>

          <div part="message" id="message">
            <slot></slot>
            [[message]]
          </div>
        </div>

        <div part="footer">
          <div class="cancel-button">
            <slot name="cancel-button">
              <vaadin-button
                id="cancel"
                theme$="[[cancelTheme]]"
                on-click="_cancel"
                hidden$="[[!cancel]]"
                aria-describedby="message"
              >
                [[cancelText]]
              </vaadin-button>
            </slot>
          </div>
          <div class="reject-button">
            <slot name="reject-button">
              <vaadin-button
                id="reject"
                theme$="[[rejectTheme]]"
                on-click="_reject"
                hidden$="[[!reject]]"
                aria-describedby="message"
              >
                [[rejectText]]
              </vaadin-button>
            </slot>
          </div>
          <div class="confirm-button">
            <slot name="confirm-button">
              <vaadin-button id="confirm" theme$="[[confirmTheme]]" on-click="_confirm" aria-describedby="message">
                [[confirmText]]
              </vaadin-button>
            </slot>
          </div>
        </div>
      </template>
    `;
  }
  static get is() {
    return "vaadin-confirm-dialog";
  }
  static get properties() {
    return {
      opened: {
        type: Boolean,
        value: false,
        notify: true,
        observer: "_openedChanged"
      },
      header: {
        type: String,
        value: ""
      },
      message: {
        type: String
      },
      confirmText: {
        type: String,
        value: "Confirm"
      },
      confirmTheme: {
        type: String,
        value: "primary"
      },
      noCloseOnEsc: {
        type: Boolean,
        value: false
      },
      reject: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      rejectText: {
        type: String,
        value: "Reject"
      },
      rejectTheme: {
        type: String,
        value: "error tertiary"
      },
      cancel: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      cancelText: {
        type: String,
        value: "Cancel"
      },
      cancelTheme: {
        type: String,
        value: "tertiary"
      },
      _confirmButton: {
        type: Element
      }
    };
  }
  static _finalizeClass() {
    super._finalizeClass();
    const devModeCallback = window.Vaadin.developmentModeCallback;
    const licenseChecker = devModeCallback && devModeCallback["vaadin-license-checker"];
    if (typeof licenseChecker === "function") {
      licenseChecker(ConfirmDialog);
    }
  }
  ready() {
    super.ready();
    this.$.dialog.$.overlay.addEventListener("vaadin-overlay-escape-press", this._escPressed.bind(this));
    if (this._dimensions) {
      Object.keys(this._dimensions).forEach((name) => {
        this._setDimension(name, this._dimensions[name]);
      });
    }
  }
  attributeChangedCallback(name, oldValue, newValue) {
    super.attributeChangedCallback(name, oldValue, newValue);
    if (name === "dir") {
      const value = newValue === "rtl";
      this.__isRTL = value;
      this.opened && this.__toggleContentRTL(value);
    }
  }
  __toggleContentRTL(rtl) {
    const contentBlock = this.$.dialog.$.overlay.content.querySelector("#content");
    const footerBlock = this.$.dialog.$.overlay.content.querySelector("[part=footer]");
    if (rtl) {
      contentBlock.setAttribute("dir", "rtl");
      footerBlock.setAttribute("dir", "rtl");
    } else {
      contentBlock.removeAttribute("dir");
      footerBlock.removeAttribute("dir");
    }
  }
  _openedChanged() {
    if (!this.opened) {
      return;
    }
    this.$.dialog.$.overlay.template = this.$.dialogTemplate;
    const overlay = this.$.dialog.$.overlay;
    Array.from(this.childNodes).forEach((c) => {
      const newChild = overlay.$.content.appendChild(c);
      if (newChild.getAttribute && newChild.getAttribute("slot") == "confirm-button" && newChild.focus) {
        this._confirmButton = newChild;
      }
    });
    this.__toggleContentRTL(this.__isRTL);
    requestAnimationFrame(() => {
      const confirmButton = this._confirmButton || overlay.content.querySelector("#confirm");
      confirmButton.focus();
      const { height } = getComputedStyle(overlay.content.querySelector("[part=footer]"));
      this.$.dialog.$.overlay.style.setProperty("--_vaadin-confirm-dialog-footer-height", height);
    });
  }
  _escPressed(event) {
    if (!event.defaultPrevented) {
      this._cancel();
    }
  }
  _confirm() {
    this.dispatchEvent(new CustomEvent("confirm"));
    this.opened = false;
  }
  _cancel() {
    this.dispatchEvent(new CustomEvent("cancel"));
    this.opened = false;
  }
  _reject() {
    this.dispatchEvent(new CustomEvent("reject"));
    this.opened = false;
  }
  _getAriaLabel(header) {
    return header || "confirmation";
  }
  _setWidth(width) {
    this._setDimensionIfAttached("width", width);
  }
  _setHeight(height) {
    this._setDimensionIfAttached("height", height);
  }
  _setDimensionIfAttached(name, value) {
    if (this.$ && this.$.dialog) {
      this._setDimension(name, value);
    } else {
      this._dimensions = this._dimensions || {};
      this._dimensions[name] = value;
    }
  }
  _setDimension(name, value) {
    this.$.dialog.$.overlay.style.setProperty(`--_vaadin-confirm-dialog-content-${name}`, value);
  }
};
customElements.define(ConfirmDialog.is, ConfirmDialog);
/**
 * @license
 * Copyright (c) 2018 - 2021 Vaadin Ltd
 * This program is available under Commercial Vaadin Developer License 4.0, available at https://vaadin.com/license/cvdl-4.0.
 */
//# sourceMappingURL=chunk-Q6RJT5AX.js.map
