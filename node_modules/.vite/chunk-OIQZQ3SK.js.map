{
  "version": 3,
  "sources": ["../.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};"],
  "mappings": "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",
  "names": []
}
